//
//  MyEventsTableViewController.swift
//  LotSportz
//
//  Created by Tom Strissel on 5/18/16.
//  Copyright Â© 2016 Bobby Ren. All rights reserved.
//

import UIKit
import SWRevealViewController
import FBSDKShareKit

class MyEventsTableViewController: UITableViewController, EventCellDelegate, FBSDKSharingDelegate {
    
    var service = EventService.sharedInstance()
    var sortedUpcomingEvents: [Event] = []
    var sortedPastEvents: [Event] = []
    @IBOutlet var menuButton: UIBarButtonItem!

    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        if self.revealViewController() != nil {
            menuButton.target = self.revealViewController()
            menuButton.action = #selector(SWRevealViewController.revealToggle(_:))
        }
        
        self.refreshEvents()
        
        
        self.navigationItem.title = "My Events"
        self.service.listenForEventUsers()
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func refreshEvents() {
        
        service.getEvents(type: nil) { (results) in
            // completion function will get called once at the start, and each time events change
            
            // 1: sort all events by time
            self.sortedUpcomingEvents = results.sort { (event1, event2) -> Bool in
                return event1.id() < event2.id()
            }
            
            // 2: Remove events the user has joined
            self.service.getEventsForUser(firAuth!.currentUser!, completion: { (eventIds) in
                self.sortedUpcomingEvents = self.sortedUpcomingEvents.filter({ (event) -> Bool in
                    eventIds.contains(event.id())
                })
                
                let original = self.sortedUpcomingEvents
                self.sortedPastEvents = original.filter({ (event) -> Bool in
                    event.isPast()
                })
                
                self.sortedUpcomingEvents = original.filter({ (event) -> Bool in
                    !event.isPast()
                })
                NotificationService.refreshNotifications(self.sortedUpcomingEvents)
                self.tableView.reloadData()
            })
        }
        
    }
    
    // MARK: - Table view data source

    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {
        return 2
    }

    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch section {
        case 0:
            return self.sortedUpcomingEvents.count
        case 1:
            return self.sortedPastEvents.count
        default:
            break
        }
        return 0
    }
    
    override func tableView(tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        switch section {
        case 0:
            return "Upcoming events"
        case 1:
            return "Past events"
        default:
            break
        }
        
        return nil
    }

    
    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let cell : EventCell = tableView.dequeueReusableCellWithIdentifier("EventCell", forIndexPath: indexPath) as! EventCell
        cell.delegate = self
        
        switch indexPath.section {
        case 0:
            let event = self.sortedUpcomingEvents[indexPath.row]
            cell.setupWithEvent(event)
        default:
            let event = self.sortedPastEvents[indexPath.row]
            cell.setupWithEvent(event)
        }
        return cell
    }

    // MARK: EventCellDelegate
    func joinOrLeaveEvent(event: Event, join: Bool) {
        let user = firAuth!.currentUser!
        if join {
            self.service.joinEvent(event, user: user)
        }
        else {
            self.service.leaveEvent(event, user: user)
        }
        
        self.refreshEvents()
    }
    override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        guard indexPath.section == 0 else {
            self.tableView.deselectRowAtIndexPath(indexPath, animated: true)
            return
        }

        self.performSegueWithIdentifier("toMyEventDetails", sender: self)
        
// TODO: sharing
        tableView.deselectRowAtIndexPath(indexPath, animated: true)
        guard indexPath.section == 0 else { return }

        let event = self.sortedUpcomingEvents[indexPath.row]
        self.shareEvent(event)
    }
    
<<<<<<< 2306c5340ab7100c18849f5d612db02e9e869318
    // MARK: - Navigation
=======
    // MARK: - FBShare
    func shareEvent(event: Event) {
        let content: FBSDKShareLinkContent = FBSDKShareLinkContent()
        content.contentURL = NSURL(string: "https://renderapps.io")
        content.imageURL = NSURL(string: "http://static1.squarespace.com/static/5688d7fe5a56682e0b85541a/t/574c51e2b09f953f297d2c56/1464619638609/Man_Sitting.jpg?format=1200w")
        content.contentTitle = "My event on LotSportz"
        content.contentDescription = "I'm attending an event on LotSportz: \(event.type()) at \(event.city()) on \(event.dateString(event.startTime()))"
        /*
         This does not use contentTitle and contentDescription if the native app share dialog is used. It only works via web/safari facebook sharing.
         See: http://stackoverflow.com/questions/29916591/fbsdksharelinkcontent-is-not-setting-the-contentdescription-and-contenttitle
        FBSDKShareDialog.showFromViewController(self, withContent: content, delegate: self)
        */
        
        let dialog = FBSDKShareDialog()
        dialog.shareContent = content
        dialog.fromViewController = self
        dialog.mode = FBSDKShareDialogMode.Native
        if dialog.canShow() {
            // FB app exists - this share works no matter what
            dialog.show()
        }
        else {
            // FB app not installed on phone. user may have to login
            // this opens a dialog in the app, but link and title are correctly shared.
            dialog.mode = FBSDKShareDialogMode.FeedWeb
            dialog.show()
        }
    }
>>>>>>> added facebook share dialogs for if FB app is installed or not installed; shares title and content correctly
    
    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
        let detailsController = segue.destinationViewController as! EventDisplayViewController
        detailsController.alreadyJoined = true
        detailsController.delegate = self
        
        let indexPath = self.tableView.indexPathForSelectedRow
        detailsController.event = sortedUpcomingEvents[indexPath!.row]
        
    }
    
}
